// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	generated "github.com/SawitProRecruitment/UserService/generated"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockRepositoryInterface) ComparePassword(ctx context.Context, phone_number, password string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", ctx, phone_number, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockRepositoryInterfaceMockRecorder) ComparePassword(ctx, phone_number, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockRepositoryInterface)(nil).ComparePassword), ctx, phone_number, password)
}

// GetProfile mocks base method.
func (m *MockRepositoryInterface) GetProfile(ctx context.Context, user_id int) (generated.UserProfilePresenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, user_id)
	ret0, _ := ret[0].(generated.UserProfilePresenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRepositoryInterfaceMockRecorder) GetProfile(ctx, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).GetProfile), ctx, user_id)
}

// SetProfile mocks base method.
func (m *MockRepositoryInterface) SetProfile(ctx context.Context, inp generated.UserRegistrationRequest) (generated.UserRegistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfile", ctx, inp)
	ret0, _ := ret[0].(generated.UserRegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfile indicates an expected call of SetProfile.
func (mr *MockRepositoryInterfaceMockRecorder) SetProfile(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).SetProfile), ctx, inp)
}

// UpdateProfile mocks base method.
func (m *MockRepositoryInterface) UpdateProfile(ctx context.Context, user_id int, inp generated.UserProfilePresenter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, user_id, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateProfile(ctx, user_id, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateProfile), ctx, user_id, inp)
}
